{"version":3,"sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Container/Container.styled.jsx","components/Container/Container.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","hooks/useLocalStorage.js","components/App/App.jsx","index.js"],"names":["Wrapper","Title","Section","title","children","StyledContainer","Container","StyledForm","InputContainer","Input","Label","Button","ContactForm","onSubmit","useState","name","setName","number","setNumber","nameInputId","nanoid","telInputId","handleChange","e","currentTarget","value","preventDefault","id","type","onChange","pattern","autoComplete","placeholder","maxLength","required","htmlFor","size","propTypes","PropTypes","string","isRequired","func","List","Item","ContactList","contacts","onDeleteContact","map","onClick","Filter","setValue","filterInputId","target","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","filter","setFilter","includedName","find","contact","toLowerCase","includedNumber","replace","Swal","fire","position","icon","toUpperCase","confirmButtonColor","checkContact","addContact","length","includes","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcfbc3c4.chunk.js","sourcesContent":["import styled from \"@emotion/styled/macro\";\n\nexport const Wrapper = styled.section`\n  padding: 40px 0;\n`;\nexport const Title = styled.h2`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 50px;\n  margin-left: auto;\n  margin-right: auto;\n\n  text-transform: uppercase;\n  font-size: 32px;\n  text-align: center;\n`;\n","import PropTypes from \"prop-types\";\nimport { Wrapper, Title } from \"./Section.styled\";\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Wrapper>\n      {title && <Title>{title}</Title>}\n      {children}\n    </Wrapper>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n","import styled from \"@emotion/styled/macro\";\n\nexport const StyledContainer = styled.div`\n  width: 800px;\n  margin: 0 auto;\n  padding: 30px;\n  border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.5) 0 0 10px 5px;\n\n  background-color: var(--color-bg);\n\n  & h1,\n  h2 {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    color: var(--color-dark);\n\n    & svg {\n      margin-right: 10px;\n    }\n  }\n\n  & h1 {\n    font-size: 40px;\n    margin-bottom: 40px;\n  }\n\n  & h2 {\n    font-size: 28px;\n    margin-bottom: 60px;\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { StyledContainer } from \"./Container.styled\";\n\nexport const Container = ({ children }) => {\n  return <StyledContainer>{children}</StyledContainer>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import styled from \"@emotion/styled/macro\";\n\nexport const StyledForm = styled.form`\n  width: 450px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 40px;\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n  margin-bottom: 40px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 100%;\n  height: 40px;\n  padding-left: 30px;\n  border: none;\n  border-bottom: 1px solid tan;\n\n  font-size: 20px;\n  color: var(--color-accent);\n  background-color: transparent;\n\n  &::placeholder {\n    opacity: 0;\n\n    color: var(--color-accent);\n\n    transition: opacity 250ms ease;\n  }\n\n  &:focus {\n    outline: none;\n    border-color: var(--color-accent);\n\n    &::placeholder {\n      opacity: 0.7;\n      transition-delay: 250ms;\n    }\n  }\n\n  &:focus + label,\n  &:not(:placeholder-shown) + label {\n    transform: translate(-32px, -30px);\n    font-size: 14px;\n    text-transform: uppercase;\n    font-weight: 600;\n    color: var(--color-accent);\n\n    & svg {\n      color: var(--color-accent);\n      transform: translate(32px, 30px);\n    }\n  }\n`;\n\nexport const Label = styled.label`\n  position: absolute;\n  left: 0;\n  bottom: 5px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 5px;\n  cursor: text;\n  font-size: 20px;\n\n  color: var(--color-light);\n\n  transition: color 250ms ease-in-out, transform 250ms ease-in-out;\n\n  & svg {\n    margin-right: 10px;\n    transition: color 250ms ease-in-out, transform 250ms ease-in-out;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 5px 10px;\n  cursor: pointer;\n  border: 2px solid tan;\n  border-radius: 4px;\n\n  font-size: 20px;\n  text-transform: uppercase;\n  color: var(--color-light);\n  background-color: transparent;\n\n  transition: all 250ms ease-in-out;\n\n  &:hover {\n    border-color: var(--color-accent);\n    color: var(--color-accent);\n  }\n\n  & svg {\n    margin-right: 10px;\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport {\n  StyledForm,\n  InputContainer,\n  Input,\n  Label,\n  Button,\n} from \"./ContactForm.styled\";\nimport { FiUser, FiPhone, FiUserPlus } from \"react-icons/fi\";\n\nexport const ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const nameInputId = nanoid();\n  const telInputId = nanoid();\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    onSubmit({ name, number });\n\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <InputContainer>\n        <Input\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          autoComplete=\"off\"\n          placeholder=\"Dmitry Karas\"\n          maxLength=\"40\"\n          required\n        />\n\n        <Label htmlFor={nameInputId}>\n          <FiUser size=\"22\" />\n          Name\n        </Label>\n      </InputContainer>\n\n      <InputContainer>\n        <Input\n          id={telInputId}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          autoComplete=\"off\"\n          placeholder=\"444-55-66\"\n          maxLength=\"17\"\n          required\n        />\n        <Label htmlFor={telInputId}>\n          <FiPhone size=\"22\" />\n          Number\n        </Label>\n      </InputContainer>\n\n      <Button type=\"submit\">\n        <FiUserPlus size=\"30\" />\n        add\n      </Button>\n    </StyledForm>\n  );\n};\n\n// export class ContactForm extends Component {\n//   state = { contacts: [], name: \"\", number: \"\" };\n\n//   nameInputId = nanoid();\n//   telInputId = nanoid();\n//   contactId = nanoid();\n\n//   handleChange = (e) => {\n//     const { name, value } = e.currentTarget;\n\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     this.props.onSubmit(this.state);\n//     this.resetForm();\n//   };\n\n//   resetForm = () => {\n//     this.setState({ name: \"\", number: \"\" });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n// return (\n//   <StyledForm onSubmit={this.handleSubmit}>\n//     <InputContainer>\n//       <Input\n//         id={this.nameInputId}\n//         type=\"text\"\n//         name=\"name\"\n//         value={name}\n//         onChange={this.handleChange}\n//         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//         title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//         autoComplete=\"off\"\n//         placeholder=\"Dmitry Karas\"\n//         maxLength=\"40\"\n//         required\n//       />\n\n//       <Label htmlFor={this.nameInputId}>\n//         <FiUser size=\"22\" />\n//         Name\n//       </Label>\n//     </InputContainer>\n\n//     <InputContainer>\n//       <Input\n//         id={this.telInputId}\n//         type=\"tel\"\n//         name=\"number\"\n//         value={number}\n//         onChange={this.handleChange}\n//         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//         title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//         autoComplete=\"off\"\n//         placeholder=\"444-55-66\"\n//         maxLength=\"17\"\n//         required\n//       />\n//       <Label htmlFor={this.telInputId}>\n//         <FiPhone size=\"22\" />\n//         Number\n//       </Label>\n//     </InputContainer>\n\n//     <Button type=\"submit\">\n//       <FiUserPlus size=\"30\" />\n//       add\n//     </Button>\n//   </StyledForm>\n// );\n//   }\n// }\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import styled from \"@emotion/styled/macro\";\n\nexport const List = styled.ul`\n  border-radius: 4px;\n  overflow: hidden;\n`;\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin: 0 auto;\n  padding: 10px 5px;\n  border-bottom: 1px solid rosybrown;\n\n  & span {\n    display: inline-flex;\n    align-items: center;\n\n    font-weight: 600;\n    color: var(--color-dark);\n\n    &:first-of-type {\n      color: var(--color-accent);\n      margin-right: 10px;\n    }\n\n    & svg {\n      margin-right: 10px;\n      color: var(--color-accent);\n    }\n  }\n\n  & svg {\n    color: var(--color-title);\n  }\n`;\nexport const Button = styled.button`\n  display: block;\n  margin-left: auto;\n  padding: 10px;\n  border: none;\n  cursor: pointer;\n\n  background-color: transparent;\n  transition: all 250ms ease-in-out;\n\n  &:hover {\n    color: var(--color-accent);\n    transform: scale(1.3);\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { BsTrash } from \"react-icons/bs\";\nimport { MdContactPhone } from \"react-icons/md\";\nimport { List, Item, Button } from \"./ContactList.styled\";\n\nexport const ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <Item key={id}>\n            <span>\n              <MdContactPhone size=\"20\" />\n              {name}:\n            </span>\n            <span>{number}</span>\n            <Button\n              onClick={() => {\n                onDeleteContact(id);\n              }}\n            >\n              <BsTrash size=\"20\" />\n            </Button>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import styled from \"@emotion/styled/macro\";\n\nexport const InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n  margin-bottom: 40px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 100%;\n  height: 40px;\n  margin-bottom: 40px;\n  padding-left: 40px;\n  border: none;\n  border-bottom: 1px solid tan;\n\n  font-size: 20px;\n  color: var(--color-accent);\n  background-color: transparent;\n\n  transition: all 250ms ease-in-out;\n\n  &::placeholder {\n    opacity: 0;\n\n    color: var(--color-accent);\n\n    transition: opacity 250ms ease;\n  }\n\n  &:focus {\n    outline: none;\n    border-bottom: 1px solid var(--color-accent);\n\n    &::placeholder {\n      opacity: 0.7;\n      transition-delay: 250ms;\n    }\n  }\n\n  &:focus + label,\n  &:not(:placeholder-shown) + label {\n    transform: translate(-36px, -30px);\n    font-size: 14px;\n    text-transform: uppercase;\n    font-weight: 600;\n    color: var(--color-accent);\n\n    & svg {\n      color: var(--color-accent);\n      transform: translate(36px, 30px);\n    }\n  }\n`;\n\nexport const Label = styled.label`\n  position: absolute;\n  left: 0;\n  bottom: 5px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 5px;\n  cursor: text;\n\n  font-size: 20px;\n  color: tan;\n\n  transition: color 250ms ease-in-out, transform 250ms ease-in-out;\n\n  & svg {\n    margin-right: 10px;\n    transition: color 250ms ease-in-out, transform 250ms ease-in-out;\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { AiOutlineFileSearch } from \"react-icons/ai\";\nimport { InputContainer, Input, Label } from \"./Filter.styled\";\n\nexport const Filter = ({ onChange }) => {\n  const [value, setValue] = useState(\"\");\n\n  const filterInputId = nanoid();\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n\n    setValue(value);\n    onChange(value);\n  };\n\n  return (\n    <>\n      <InputContainer>\n        <Input\n          id={filterInputId}\n          type=\"text\"\n          value={value}\n          onChange={handleChange}\n          placeholder=\"Dmitry\"\n        />\n        <Label htmlFor={filterInputId}>\n          <AiOutlineFileSearch size=\"30\" />\n          Find contacts by name\n        </Label>\n      </InputContainer>\n    </>\n  );\n};\n\n// export class Filter extends Component {\n//   state = {\n//     value: '',\n//   }\n\n//   filterInputId = nanoid()\n\n//   handleChange = (e) => {\n//     const { value } = e.target\n\n//     this.setState({ value })\n//     this.props.onChange(value)\n//   }\n\n//   render() {\n//     const { value } = this.state\n\n//     return (\n//       <>\n//         <InputContainer>\n//           <Input\n//             id={this.filterInputId}\n//             type=\"text\"\n//             value={value}\n//             onChange={this.handleChange}\n//             placeholder=\"Dmitry\"\n//           />\n//           <Label htmlFor={this.filterInputId}>\n//             <AiOutlineFileSearch size=\"30\" />\n//             Find contacts by name\n//           </Label>\n//         </InputContainer>\n//       </>\n//     )\n//   }\n// }\n\nInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from \"react\";\n\nexport const useLocalStorage = (key, defaultValue) => {\n  const [state, setState] = useState(\n    JSON.parse(window.localStorage.getItem(key)) ?? defaultValue\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n","import Swal from \"sweetalert2\";\nimport { useState } from \"react\";\nimport { RiContactsBook2Fill, RiContactsFill } from \"react-icons/ri\";\nimport { nanoid } from \"nanoid\";\nimport { Section } from \"../Section/Section\";\nimport { Container } from \"../Container/Container\";\nimport { ContactForm } from \"../ContactForm/ContactForm\";\nimport { ContactList } from \"../ContactList/ContactList\";\nimport { Filter } from \"../Filter/Filter\";\nimport { useLocalStorage } from \"../../hooks/useLocalStorage\";\n\nconst App = () => {\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\n  const [filter, setFilter] = useState(null);\n\n  const checkContact = (name, number) => {\n    const includedName = contacts.find(\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    const includedNumber = contacts.find(\n      (contact) =>\n        contact.number.replace(/[^0-9]/g, \"\") === number.replace(/[^0-9]/g, \"\")\n    );\n\n    if (includedName) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: `${name.toUpperCase()}\\nis already in contacts!`,\n        confirmButtonColor: \"indianred\",\n      });\n    }\n\n    if (includedNumber) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: `This number is already in contacts as\\n${includedNumber.name.toUpperCase()}`,\n        confirmButtonColor: \"indianred\",\n      });\n    }\n  };\n\n  const addContact = (name, number) => {\n    const id = nanoid();\n\n    setContacts((contacts) => [...contacts, { id, name, number }]);\n  };\n\n  const deleteContact = (contactId) => {\n    setContacts(contacts.filter((contact) => contact.id !== contactId));\n  };\n\n  const filterContacts = () =>\n    contacts.filter(\n      (contact) =>\n        contact.name.toLowerCase().includes(filter) ||\n        contact.number.includes(filter)\n    );\n\n  const handleFilterInputChange = (value) => {\n    setFilter(value.toLowerCase());\n  };\n\n  const handleFormSubmit = ({ name, number }) => {\n    const includedContact = checkContact(name, number);\n\n    if (includedContact) {\n      return;\n    }\n\n    addContact(name, number);\n  };\n\n  return (\n    <>\n      <Section>\n        <Container>\n          <h1>\n            <RiContactsBook2Fill />\n            Phonebook\n          </h1>\n          <ContactForm onSubmit={handleFormSubmit} />\n          {contacts.length > 0 && (\n            <>\n              <h2>\n                <RiContactsFill />\n                Contacts\n              </h2>\n              <Filter onChange={handleFilterInputChange} />\n              <ContactList\n                contacts={filter ? filterContacts() : contacts}\n                onDeleteContact={deleteContact}\n              />\n            </>\n          )}\n        </Container>\n      </Section>\n    </>\n  );\n};\n\n// export default class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//   };\n\n//   componentDidMount() {\n//     const contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n\n//     if (contacts) {\n//       this.setState({ contacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     const prevContacts = prevState.contacts;\n//     const nextContacts = this.state.contacts;\n\n//     if (prevContacts !== nextContacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(nextContacts));\n//     }\n//   }\n\n// checkContact = (name, number) => {\n//   const { contacts } = this.state\n\n//   const includedName = contacts.find(\n//     (contact) => contact.name.toLowerCase() === name.toLowerCase(),\n//   )\n\n//   const includedNumber = contacts.find(\n//     (contact) =>\n//       contact.number.replace(/[^0-9]/g, '') === number.replace(/[^0-9]/g, ''),\n//   )\n\n//   if (includedName) {\n//     return Swal.fire({\n//       position: 'center',\n//       icon: 'error',\n//       title: `${name.toUpperCase()}\\nis already in contacts!`,\n//       confirmButtonColor: 'indianred',\n//     })\n//   }\n\n//   if (includedNumber) {\n//     return Swal.fire({\n//       position: 'center',\n//       icon: 'error',\n//       title: `This number is already in contacts as\\n${includedNumber.name.toUpperCase()}`,\n//       confirmButtonColor: 'indianred',\n//     })\n//   }\n// }\n\n// addContact = (name, number) => {\n//   const id = nanoid()\n\n//   this.setState((prevState) => ({\n//     contacts: [...prevState.contacts, { id, name, number }],\n//   }))\n// }\n\n// deleteContact = (contactId) => {\n//   this.setState(({ contacts }) => ({\n//     contacts: contacts.filter((contact) => contact.id !== contactId),\n//   }))\n// }\n\n// handleFilterInputChange = (value) => {\n//   this.setState({ filter: value.toLowerCase() })\n// }\n\n// handleFormSubmit = ({ name, number }) => {\n//   const includedContact = this.checkContact(name, number)\n\n//   if (includedContact) {\n//     return\n//   }\n\n//   this.addContact(name, number)\n// }\n\n//   render() {\n//     const { contacts, filter } = this.state;\n// const filteredContacts = contacts.filter(\n//   (contact) =>\n//     contact.name.toLowerCase().includes(filter) ||\n//     contact.number.includes(filter)\n// );\n\n//     return (\n//       <>\n//         <Section>\n//           <Container>\n//             <h1>\n//               <RiContactsBook2Fill />\n//               Phonebook\n//             </h1>\n//             <ContactForm onSubmit={this.handleFormSubmit} />\n//             {contacts.length > 0 && (\n//               <>\n//                 <h2>\n//                   <RiContactsFill />\n//                   Contacts\n//                 </h2>\n//                 <Filter onChange={this.handleFilterInputChange} />\n//                 <ContactList\n//                   contacts={filteredContacts}\n//                   onDeleteContact={this.deleteContact}\n//                 />\n//               </>\n//             )}\n//           </Container>\n//         </Section>\n//       </>\n//     );\n//   }\n// }\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}